Metadata-Version: 2.4
Name: lumos-idl
Version: 0.1.0
Summary: LumosInterface - A modern Interface Definition Language
Author: Daniel Pi
License: MIT
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: lark>=1.1.0
Requires-Dist: tomli>=2.0.0; python_version < "3.11"
Requires-Dist: pyyaml>=6.0
Provides-Extra: dev
Requires-Dist: pytest>=7.0.0; extra == "dev"
Requires-Dist: pytest-cov>=4.0.0; extra == "dev"
Requires-Dist: black>=22.0.0; extra == "dev"
Requires-Dist: mypy>=0.990; extra == "dev"
Provides-Extra: save
Requires-Dist: tomli-w>=1.0.0; extra == "save"

# LumosInterface IDL

A modern Interface Definition Language (IDL) for defining data structures and interfaces with support for multiple target languages.

## Features

- **Modern Syntax**: Clean, indentation-based syntax similar to Python
- **Rich Type System**:
  - Primitive types: `bool`, `int8`-`int64`, `uint8`-`uint64`, `float32`, `float64`, `string`
  - User-defined types: `struct` and `interface`
  - Collection types: `array<T>`, `matrix<T, M, N>`, `tensor<T, D...>`
  - Type aliases: `using NewType = ExistingType`
- **Namespace Support**: C++-style namespaces derived from file paths
- **Field Numbering**: Optional Protobuf-style field numbering for wire format stability
- **Attributes**: Both inline (`@attr(value)`) and indented attribute blocks
- **Optional Fields**: Mark fields as optional with the `optional` keyword
- **Imports**: Import definitions from other files
- **Constants**: Define typed constants

## Installation

### Development Installation

```bash
# Clone repository
git clone https://github.com/yourname/LumosInterface.git
cd LumosInterface

# Install in development mode
pip install -e .

# Or with development dependencies
pip install -e ".[dev]"
```

## Quick Start

### Python API

```python
from lumos_idl import IDLProcessor

# Parse a file
processor = IDLProcessor()
result = processor.parse_file("interfaces/robot_state.msg")

if result.success:
    print("âœ“ Parsing succeeded")
    for file_path, file_info in result.files.items():
        print(f"  {file_path}: namespace={file_info.namespace}")
else:
    for error in result.errors:
        print(f"  {error}")
```

### Command Line

```bash
# Validate a single file
python -m lumos_idl validate interfaces/robot_state.msg

# Validate a directory (recursive)
python -m lumos_idl validate interfaces/ --recursive

# Create default configuration
python -m lumos_idl init

# Validate with config
python -m lumos_idl validate interfaces/ -c lumos.toml --recursive
```

## Syntax Examples

### Basic Struct

```
struct Position
    float64 latitude
    float64 longitude
    optional float64 altitude
```

### Struct with Field Numbers

```
struct SensorData
    uint32 id : 0
    float64 temperature : 1
    float64 pressure : 2
    optional string location : 3
```

### Struct with Attributes

```
struct Config
    [attributes]
        version: "1.0"
        packed: true

    string name
        description: "Configuration name"
        max_length: 64
    uint32 timeout
        unit: "milliseconds"
```

### Collection Types

```
struct DataBuffer
    array<uint8, 256> fixed_buffer
    array<float32> dynamic_array
    array<int32, max=1000> bounded_array
    matrix<float64, 3, 3> rotation_matrix
    tensor<float32, 10, 10, 10> data_cube
```

### Inline Attributes

```
struct User
    uint32 id @primary(true), @indexed(true)
    string email @unique(true)
    optional string name
```

### Imports and Namespaces

```
import common/geometry
import common/types

using namespace common::geometry

struct RobotState
    Vector3 position
    Quaternion orientation
    common::types::Timestamp time
```

### Type Aliases

```
using Timestamp = uint64
using Temperature = float32
using GPSCoordinate = float64

struct Measurement
    Timestamp time
    Temperature value
```

### Constants

```
const uint8 MAX_SATELLITES = 12
const float64 EARTH_RADIUS = 6371000.0
const string VERSION = "1.0.0"
```

### Interface Type

```
interface MessageProtocol
    uint32 message_id : 0
    string payload : 1
    optional bytes metadata : 2
```

## Configuration

Create a `lumos.toml` configuration file:

```toml
[lumos]
version = "1.0"

[search_paths]
paths = [
    "interfaces",
    "common",
]

[validation]
enforce_field_numbering = false
allow_negative_field_numbers = false
max_field_number = 536870911
warn_on_number_gaps = true
enforce_naming_conventions = false

[naming]
type_name_pattern = "^[A-Z][a-zA-Z0-9]*$"
field_name_pattern = "^[a-z][a-z0-9_]*$"
constant_name_pattern = "^[A-Z][A-Z0-9_]*$"

[codegen]
python_output_dir = "generated/python"
cpp_output_dir = "generated/cpp"
generate_type_hints = true
generate_validation = true
generate_serialization = true

[codegen.python]
use_dataclasses = true
use_pydantic = false
target_version = "3.8"

[codegen.cpp]
standard = "c++17"
use_smart_pointers = true
namespace = "lumos"
```

## Package Structure

```
LumosInterface/
â”œâ”€â”€ lumos_idl/                      # Main Python package
â”‚   â”œâ”€â”€ __init__.py                 # Public API (IDLProcessor)
â”‚   â”œâ”€â”€ __main__.py                 # CLI interface
â”‚   â”œâ”€â”€ config.py                   # Configuration management
â”‚   â”œâ”€â”€ parser/                     # Parsing phase
â”‚   â”‚   â”œâ”€â”€ grammar_loader.py      # Load and cache grammar
â”‚   â”‚   â”œâ”€â”€ preprocessor.py        # Indentation preprocessing
â”‚   â”‚   â””â”€â”€ ast_parser.py          # AST parsing with Lark
â”‚   â”œâ”€â”€ validator/                  # Validation phase (TODO)
â”‚   â”‚   â”œâ”€â”€ symbol_table.py        # Symbol table management
â”‚   â”‚   â”œâ”€â”€ import_resolver.py     # Import resolution
â”‚   â”‚   â”œâ”€â”€ type_checker.py        # Type validation
â”‚   â”‚   â”œâ”€â”€ field_validator.py     # Field validation
â”‚   â”‚   â””â”€â”€ error_reporter.py      # Error reporting
â”‚   â”œâ”€â”€ ast/                        # AST utilities
â”‚   â”‚   â”œâ”€â”€ types.py               # Type definitions for AST nodes
â”‚   â”‚   â”œâ”€â”€ visitor.py             # AST visitor pattern (TODO)
â”‚   â”‚   â””â”€â”€ transformer.py         # AST transformation (TODO)
â”‚   â”œâ”€â”€ codegen/                    # Code generation (TODO)
â”‚   â”‚   â”œâ”€â”€ python.py              # Python code generator
â”‚   â”‚   â”œâ”€â”€ cpp.py                 # C++ code generator
â”‚   â”‚   â””â”€â”€ json_schema.py         # JSON schema generator
â”‚   â””â”€â”€ utils/                      # Utilities
â”‚       â”œâ”€â”€ path_utils.py          # Path resolution utilities
â”‚       â””â”€â”€ namespace_utils.py     # Namespace utilities
â”œâ”€â”€ grammar/                        # Grammar files
â”‚   â””â”€â”€ message.lark               # Lark grammar definition
â”œâ”€â”€ tests/                          # Test suite
â”‚   â”œâ”€â”€ test_*.py                  # Standalone tests
â”‚   â””â”€â”€ test_files/                # Test .msg files
â”œâ”€â”€ pyproject.toml                  # Python project configuration
â””â”€â”€ README.md                       # This file
```

## Development Status

**Current Status**: Alpha - Core parsing complete, validation in progress

### Completed Features âœ“
- [x] Lark grammar definition
- [x] Indentation preprocessing
- [x] Import statements
- [x] Type aliases (`using`)
- [x] Constants
- [x] Struct and interface definitions
- [x] Field numbering
- [x] Optional fields
- [x] Collection types (array, matrix, tensor)
- [x] Inline attributes (`@attr`)
- [x] Indented attribute blocks
- [x] Multiline strings
- [x] Namespace support
- [x] Namespace aliases
- [x] Package structure
- [x] Configuration system (TOML)
- [x] CLI interface
- [x] Basic parsing API

### In Progress ðŸš§
- [ ] Semantic validation (see VALIDATION_ARCHITECTURE.md)
  - [ ] Symbol table
  - [ ] Import resolution
  - [ ] Type checking
  - [ ] Field validation

### Planned Features ðŸ“‹
- [ ] Code generation
  - [ ] Python (dataclasses/Pydantic)
  - [ ] C++ (structs/classes)
  - [ ] JSON Schema
- [ ] Enum types
- [ ] Documentation generation
- [ ] LSP server for IDE integration

## Testing

```bash
# Run all standalone tests
python3.9 test_struct_standalone.py
python3.9 test_interface_standalone.py
python3.9 test_imports_standalone.py
# ... etc

# Run package tests
python3.9 test_package.py

# Test CLI
python -m lumos_idl validate tests/test_files/valid/ -r
```

## Architecture Documentation

- **MODULE_STRUCTURE.md**: Package organization and public API design
- **VALIDATION_ARCHITECTURE.md**: Semantic validation system architecture
- **README_INDENTATION.md**: Indentation preprocessing implementation details

## Contributing

1. Follow the architecture outlined in MODULE_STRUCTURE.md
2. Add tests for new features
3. Update documentation
4. Run all tests before submitting

## License

MIT License

## Acknowledgments

- Built with [Lark](https://github.com/lark-parser/lark) parser
- Inspired by Protocol Buffers, ROS messages, and modern IDLs
